ステップ1: 親機を動作させ、ビーコンを送信する
1. 2MフラッシュサブカードのついたDSフラッシュカードを準備します
2. バックアップデバイスにBACKUPDATA_FOR_RED.binを書き込んでください
3. DSフラッシュカードにbasestation.srlを書き込んでください
4. DSフラッシュカードを通常のDSに挿し、起動してください
   (IS-NITRO-DEBUGGERを使うとトラブルシュートがしやすくなります)
5. 下画面に「サーバとインターネット経由で通信中」と表示されたら正常にイ
ンターネットと通信できています
6. しばらくたつと下画面に「DSの接続を待っています」と表示されます
7. この状態で親機はAP情報ビーコンを送信しています。

ステップ2: WDS組み込み済み店頭ブラウザ(DS版)でビーコン送信が正常であるこ
とを確認する
1. DSフラッシュカードを準備します
2. DSフラッシュカードにbrowser.srlを書き込んでください
3. DSフラッシュカードを通常のDSに挿し、起動してください
   (IS-NITRO-DEBUGGERを使うとトラブルシュートがしやすくなります)
4. DSは自動的に店頭配信サーバに接続します。体験版等をダウンロードする画
面が表示されれば正常です。

ステップ3: TWL用WDSライブラリのサンプルを動作させる
1. WDS080221.zipを解凍してください
2. WDS/WDSTest/bin/ARM9-TS.HYB/Release/main.srlをTWLデバッガで動かします
3. デバッグ画面にビーコンの内容が出力され、動作の確認は終了です

以下WDSライブラリの簡単な説明です。

WDSライブラリはWMライブラリのラッパーとして動作します。そのため非常にシ
ンプルな構造となっております。

関数のリファレンスに関してはWDS/include/WDS.hにDoxygen準拠のコメントが付
いていますので、そちらをご覧いただければよいかと思います。

WDSライブラリを動作させる流れは、

1. WDS_Initialize関数でライブラリを初期化します
2. WDS_StartScan関数でビーコンスキャン開始、この処理は非同期処理で、完了
時にユーザーが与えたコールバック関数が呼び出されます
3. スキャンは非常に短い時間で終了します。1回のスキャンではビーコンが取れ
ないことが多いため、ユーザーは想定するスキャン時間が過ぎるまで、スキャン
完了コールバックを受けたら、再びWDS_StartScan関数を呼び出すことを繰り返
します
4. WDS_GetApInfoNum関数を使い、取得できたビーコンの数を得ることができま
す。これとWDS_GetApInfoAll関数を組み合わせて、受信したビーコンの情報を取
り出してください。
5. DSであれば、取得したビーコンをDWC_SetSpecifyAp2関数に与えて呼び出すこ
とでACの自動接続先としてビーコンに含まれている情報を設定できるのですが、
TWLではDWCが移植されていないため、ここはコメントアウトされています。

というようなものです。WDS/WDSTest/src/main.cに非常にシンプルなソースがあ
りますので、確認にご利用下さい。
