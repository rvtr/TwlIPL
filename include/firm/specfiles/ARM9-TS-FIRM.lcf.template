#---------------------------------------------------------------------------
#  Project:  TwlSDK - include
#  File:     ARM9-TS-FIRM.lcf.template
#
#  Copyright 2007 Nintendo.  All rights reserved.
#
#  These coded instructions, statements, and computer programs contain
#  proprietary information of Nintendo of America Inc. and/or Nintendo
#  Company Ltd., and are protected by Federal copyright law.  They may
#  not be disclosed to third parties or copied or duplicated in any form,
#  in whole or in part, without the prior written consent of Nintendo.
#
#  $Date::            $
#  $Rev$
#  $Author$
#---------------------------------------------------------------------------
MEMORY
{
	<STATIC.NAME>				(RWX) :	ORIGIN = <STATIC.ADDRESS>,		LENGTH = 0x0	>	<STATIC.NAME><PROPERTY.FLXSUFFIX>

	<FOREACH.AUTOLOADS>
	<AUTOLOAD.NAME>				(RWX) :	ORIGIN = <AUTOLOAD.ADDRESS>,	LENGTH = 0x0	>>	<STATIC.NAME><PROPERTY.FLXSUFFIX>
	<END.AUTOLOADS>
	binary.AUTOLOAD_INFO		(RWX) :	ORIGIN = 0,						LENGTH = 0x0	>>	<STATIC.NAME><PROPERTY.FLXSUFFIX>
	binary.STATIC_FOOTER		(RWX) :	ORIGIN = 0,						LENGTH = 0x0	>>	<STATIC.NAME><PROPERTY.FLXSUFFIX>

	<PROPERTY.OVERLAYDEFS>F		(RW)  :	ORIGIN = 0,						LENGTH = 0x0	>	<PROPERTY.OVERLAYDEFS><PROPERTY.FLXSUFFIX>
	<PROPERTY.OVERLAYTABLE>F	(RW)  :	ORIGIN = 0,						LENGTH = 0x0	>	<PROPERTY.OVERLAYTABLE><PROPERTY.FLXSUFFIX>
	<FOREACH.OVERLAYS>
	<OVERLAY.NAME>				(RWXO):	ORIGIN = <OVERLAY.ADDRESS>,		LENGTH = 0x0	>	<OVERLAY.NAME><PROPERTY.FLXSUFFIX>
	<END.OVERLAYS>

	dummy.MAIN_EX.NITRO			(RW)  :	ORIGIN = 0x023e0000,	LENGTH = 0x0
	arena.MAIN.NITRO			(RW)  :	ORIGIN = AFTER(<STATIC.NAME><FOREACH.OVERLAYS=MAIN>,<OVERLAY.NAME><END.OVERLAYS>),	LENGTH = 0x0
	arena.MAIN_EX.NITRO			(RW)  :	ORIGIN = AFTER(dummy.MAIN_EX.NITRO<FOREACH.OVERLAYS=MAINEX>,<OVERLAY.NAME><END.OVERLAYS>),	LENGTH = 0x0
	arena.ITCM					(RW)  :	ORIGIN = AFTER(ITCM<FOREACH.OVERLAYS=ITCM>,<OVERLAY.NAME><END.OVERLAYS>),	LENGTH = 0x0
	arena.DTCM					(RW)  :	ORIGIN = AFTER(DTCM<FOREACH.OVERLAYS=DTCM>,<OVERLAY.NAME><END.OVERLAYS>),	LENGTH = 0x0

	check.ITCM					(RW)  :	ORIGIN = 0x0,					LENGTH = 0x08000	>	itcm.check
	check.DTCM					(RW)  :	ORIGIN = 0x0,					LENGTH = 0x04000	>	dtcm.check
	check.WORKRAM				(RWX) :	ORIGIN = 0x037c0000,			LENGTH = 0x40000	>	workram.check

	binary.LTDAUTOLOAD_TOP		(RW)  :	ORIGIN = 0,						LENGTH = 0x0	>	<STATIC.NAME><PROPERTY.LTDSUFFIX>
	<FOREACH.LTDAUTOLOADS>
	<LTDAUTOLOAD.NAME>			(RWX) :	ORIGIN = <LTDAUTOLOAD.ADDRESS>,	LENGTH = 0x0	>>	<STATIC.NAME><PROPERTY.LTDSUFFIX>
	<END.LTDAUTOLOADS>
	binary.LTDAUTOLOAD_INFO		(RWX) :	ORIGIN = 0,						LENGTH = 0x0	>>	<STATIC.NAME><PROPERTY.LTDSUFFIX>

	<PROPERTY.LTDOVERLAYDEFS>L	(RW)  :	ORIGIN = 0,						LENGTH = 0x0	>	<PROPERTY.LTDOVERLAYDEFS><PROPERTY.LTDSUFFIX>
	<PROPERTY.LTDOVERLAYTABLE>L	(RW)  :	ORIGIN = 0,						LENGTH = 0x0	>	<PROPERTY.LTDOVERLAYTABLE><PROPERTY.LTDSUFFIX>
	<FOREACH.LTDOVERLAYS>
	<LTDOVERLAY.NAME>			(RWXO):	ORIGIN = <LTDOVERLAY.ADDRESS>,	LENGTH = 0x0	>	<LTDOVERLAY.NAME><PROPERTY.LTDSUFFIX>
	<END.LTDOVERLAYS>

	dummy.MAIN_EX.TWL			(RW)  :	ORIGIN = 0x0d000000,	LENGTH = 0x0
	arena.WRAM.TWL				(RW)  :	ORIGIN = AFTER(<STATIC.NAME><FOREACH.OVERLAYS=MAIN>,<OVERLAY.NAME><END.OVERLAYS>,LTDMAIN<FOREACH.LTDOVERLAYS=MAIN>,<LTDOVERLAY.NAME><END.LTDOVERLAYS>),	LENGTH = 0x0
	arena.MAIN.TWL				(RW)  : ORIGIN = 0x02000400,	LENGTH = 0x0
	arena.MAIN_EX.TWL			(RW)  :	ORIGIN = AFTER(dummy.MAIN_EX.TWL,<STATIC.NAME><FOREACH.OVERLAYS=MAIN>,<OVERLAY.NAME><END.OVERLAYS>,LTDMAIN<FOREACH.LTDOVERLAYS=MAIN>,<LTDOVERLAY.NAME><END.LTDOVERLAYS>),	LENGTH = 0x0

	binary.MODULE_FILES			(RW)  :	ORIGIN = 0,						LENGTH = 0x0	>	component.files
}

FORCE_ACTIVE
{
	SVC_SoftReset
}

KEEP_SECTION
{
	.sinit
}

SECTIONS
{
	############################ STATIC #################################
	.<STATIC.NAME>:
	{
		ALIGNALL(4);
		. = ALIGN(32);	# Fit to cache line
	
		#
		#  Definition to refer overlay segment, when same name symbols exist in multiple overlays.
		#
		<FOREACH.STATIC.SEARCHSYMBOLS>
		SEARCH_SYMBOL <STATIC.SEARCHSYMBOL>;
		<END.STATIC.SEARCHSYMBOLS>
	
		#
		#  TEXT BLOCK: READ ONLY
		#
		SDK_STATIC_START		=.;
		SDK_STATIC_TEXT_START		=.;
				#:::::::::: text/rodata
				OBJECT(_start,*)
				crt0_firm.o (.text)
				crt0_firm.o (.rodata)
				libsyscall.a (.text)
				#
				# .version セクションを追加しています。
				# このセクションに含まれる情報はロットチェックの際に
				# 必要となりますので、必ずこの位置に残すようにして下さい。
				#
				* (.version)
				OBJECT(TwlMain,*)
				<FOREACH.STATIC.OBJECTS=.text>
				<STATIC.OBJECT=.text:t>
				<END.STATIC.OBJECTS>
				<FOREACH.STATIC.LIBRARIES=.text>
				<STATIC.LIBRARY=.text:t>
				<END.STATIC.LIBRARIES>
				* (.exception)
		. = ALIGN(4);
		SDK_STATIC_ETABLE_START		=.;
		__exception_table_start__	=.;
				EXCEPTION
		__exception_table_end__		=.;
		SDK_STATIC_ETABLE_END		=.;
				<FOREACH.STATIC.OBJECTS=.rodata>
				<STATIC.OBJECT=.rodata:t>
				<END.STATIC.OBJECTS>
				<FOREACH.STATIC.LIBRARIES=.rodata>
				<STATIC.LIBRARY=.rodata:t>
				<END.STATIC.LIBRARIES>
				<FOREACH.STATIC.OBJECTS=.init>
				<STATIC.OBJECT=.init:t>
				<END.STATIC.OBJECTS>
				<FOREACH.STATIC.LIBRARIES=.init>
				<STATIC.LIBRARY=.init:t>
				<END.STATIC.LIBRARIES>
		. = ALIGN(4);
		SDK_STATIC_SINIT_START		=.;
				#:::::::::: ctor
				<FOREACH.STATIC.OBJECTS=.ctor>
				<STATIC.OBJECT=.ctor:t>
				<END.STATIC.OBJECTS>
				<FOREACH.STATIC.LIBRARIES=.ctor>
				<STATIC.LIBRARY=.ctor:t>
				<END.STATIC.LIBRARIES>
				<FOREACH.STATIC.OBJECTS=.sinit>
				<STATIC.OBJECT=.sinit:t>
				<END.STATIC.OBJECTS>
				<FOREACH.STATIC.LIBRARIES=.sinit>
				<STATIC.LIBRARY=.sinit:t>
				<END.STATIC.LIBRARIES>
				WRITEW	0;
				#:::::::::: ctor
		SDK_STATIC_SINIT_END		=.;
				#:::::::::: text/rodata
		SDK_STATIC_TEXT_END		=.;
	
		#
		#  DATA BLOCK: READ WRITE
		#
		. = ALIGN(32);	# Fit to cache line
		SDK_STATIC_DATA_START		=.;
				#:::::::::: data
				<FOREACH.STATIC.OBJECTS=.sdata>
				<STATIC.OBJECT=.sdata:t>
				<END.STATIC.OBJECTS>
				<FOREACH.STATIC.LIBRARIES=.sdata>
				<STATIC.LIBRARY=.sdata:t>
				<END.STATIC.LIBRARIES>
				<FOREACH.STATIC.OBJECTS=.data>
				<STATIC.OBJECT=.data:t>
				<END.STATIC.OBJECTS>
				<FOREACH.STATIC.LIBRARIES=.data>
				<STATIC.LIBRARY=.data:t>
				<END.STATIC.LIBRARIES>
		. = ALIGN(4);
		SDK_OVERLAY_DIGEST		=.;
				# NO DIGEST
		SDK_OVERLAY_DIGEST_END	=.;
				#:::::::::: data
		. = ALIGN(32);
		SDK_STATIC_DATA_END		=.;
		SDK_STATIC_END			=.;
	
		SDK_STATIC_TEXT_SIZE	= SDK_STATIC_TEXT_END - SDK_STATIC_TEXT_START;
		SDK_STATIC_DATA_SIZE	= SDK_STATIC_DATA_END - SDK_STATIC_DATA_START;
		SDK_STATIC_SIZE			= SDK_STATIC_END      - SDK_STATIC_START;
		__sinit__				= SDK_STATIC_SINIT_START;	# for static initializer
	
	} > <STATIC.NAME>

	.<STATIC.NAME>.bss:
	{
		ALIGNALL(4);
		. = ALIGN(32);	# Fit to cache line
	
		#
		#  Definition to refer overlay segment, when same name symbols exist in multiple overlays.
		#
		<FOREACH.STATIC.SEARCHSYMBOLS>
		SEARCH_SYMBOL <STATIC.SEARCHSYMBOL>;
		<END.STATIC.SEARCHSYMBOLS>
	
		#
		#  BSS BLOCK
		#
		SDK_STATIC_BSS_START	=.;
				#:::::::::: bss
				<FOREACH.STATIC.OBJECTS=.sbss>
				<STATIC.OBJECT=.sbss:t>
				<END.STATIC.OBJECTS>
				<FOREACH.STATIC.LIBRARIES=.sbss>
				<STATIC.LIBRARY=.sbss:t>
				<END.STATIC.LIBRARIES>
				<FOREACH.STATIC.OBJECTS=.bss>
				<STATIC.OBJECT=.bss:t>
				<END.STATIC.OBJECTS>
				<FOREACH.STATIC.LIBRARIES=.bss>
				<STATIC.LIBRARY=.bss:t>
				<END.STATIC.LIBRARIES>
				#:::::::::: bss
		. = ALIGN(32);
		SDK_STATIC_BSS_END		= .;
	
		SDK_STATIC_BSS_SIZE		= SDK_STATIC_BSS_END - SDK_STATIC_BSS_START;

	} >> <STATIC.NAME>
	
	
	############################ AUTOLOADS ##############################
	SDK_AUTOLOAD.ITCM.START			= 0x01ff8000;
	SDK_AUTOLOAD.ITCM.END			= SDK_AUTOLOAD.ITCM.START;
	SDK_AUTOLOAD.ITCM.BSS_END		= SDK_AUTOLOAD.ITCM.START;
	SDK_AUTOLOAD.ITCM.SIZE			= 0;
	SDK_AUTOLOAD.ITCM.BSS_SIZE		= 0;
	SDK_AUTOLOAD.DTCM.START			= 0x02fe0000;
	SDK_AUTOLOAD.DTCM.END			= SDK_AUTOLOAD.DTCM.START;
	SDK_AUTOLOAD.DTCM.BSS_END		= SDK_AUTOLOAD.DTCM.START;
	SDK_AUTOLOAD.DTCM.SIZE			= 0;
	SDK_AUTOLOAD.DTCM.BSS_SIZE		= 0;
	SDK_AUTOLOAD_START				= SDK_STATIC_END;
	SDK_AUTOLOAD_SIZE				= 0;
	SDK_AUTOLOAD_NUMBER				= <NUMBER.AUTOLOADS>;

	SDK_AUTOLOAD_ITCM_START			= SDK_AUTOLOAD.ITCM.START;
	SDK_AUTOLOAD_ITCM_END			= SDK_AUTOLOAD.ITCM.END;
	SDK_AUTOLOAD_ITCM_BSS_END		= SDK_AUTOLOAD.ITCM.BSS_END;
	SDK_AUTOLOAD_ITCM_SIZE			= SDK_AUTOLOAD.ITCM.SIZE;
	SDK_AUTOLOAD_ITCM_BSS_SIZE		= SDK_AUTOLOAD.ITCM.BSS_SIZE;
	SDK_AUTOLOAD_DTCM_START			= SDK_AUTOLOAD.DTCM.START;
	SDK_AUTOLOAD_DTCM_END			= SDK_AUTOLOAD.DTCM.END;
	SDK_AUTOLOAD_DTCM_BSS_END		= SDK_AUTOLOAD.DTCM.BSS_END;
	SDK_AUTOLOAD_DTCM_SIZE			= SDK_AUTOLOAD.DTCM.SIZE;
	SDK_AUTOLOAD_DTCM_BSS_SIZE		= SDK_AUTOLOAD.DTCM.BSS_SIZE;

	############################ AUTOLOAD_INFO ##########################
	.binary.AUTOLOAD_INFO:
	{
	
	} > binary.AUTOLOAD_INFO
	
	SDK_AUTOLOAD_LIST		= SDK_AUTOLOAD_START + SDK_AUTOLOAD_SIZE;
	SDK_AUTOLOAD_LIST_END	= SDK_AUTOLOAD_START + SDK_AUTOLOAD_SIZE + SIZEOF(.binary.AUTOLOAD_INFO);
	SDK_AUTOLOAD_SIZE		= SDK_AUTOLOAD_SIZE  + SIZEOF(.binary.AUTOLOAD_INFO);

	############################ STATIC_FOOTER ##########################
	.binary.STATIC_FOOTER:
	{
		WRITEW 0xdec00621;		# LE(0x2106C0DE) = NITRO CODE
		WRITEW _start_ModuleParams - ADDR(.<STATIC.NAME>);
		WRITEW 0;			# NO DIGEST
		WRITEW _start_LtdModuleParams - ADDR(.<STATIC.NAME>);
	} > binary.STATIC_FOOTER

	############################ OVERLAYS ###############################
	SDK_OVERLAY_NUMBER			= <NUMBER.OVERLAYS>;

	############################ OVERLAYDEFS ############################
	.<PROPERTY.OVERLAYDEFS>F:
	{
		###  <STATIC.NAME> module information 
				WRITEW ADDR(.<STATIC.NAME>);				# load address
				WRITEW _start;								# entry address
				WRITEW SDK_STATIC_SIZE + SDK_AUTOLOAD_SIZE;	# size of module
				WRITEW _start_AutoloadDoneCallback;			# callback autoload done
		
		###  overlay filename 
				<FOREACH.OVERLAYS>
				WRITES ("<OVERLAY.NAME><PROPERTY.FLXSUFFIX>");	# Overlay <OVERLAY.ID>
				<END.OVERLAYS>
	
	} > <PROPERTY.OVERLAYDEFS>F

	############################ OVERLAYTABLE ###########################
	.<PROPERTY.OVERLAYTABLE>F:
	{
		<FOREACH.OVERLAYS>
				WRITEW <OVERLAY.ID>;							# overlay ID
				WRITEW ADDR(.<OVERLAY.NAME>);					# load address
				WRITEW SDK_OVERLAY.<OVERLAY.NAME>.SIZE;			# size of module
				WRITEW SDK_OVERLAY.<OVERLAY.NAME>.BSS_SIZE;		# size of bss
				WRITEW SDK_OVERLAY.<OVERLAY.NAME>.SINIT_START;	# start address of static init
				WRITEW SDK_OVERLAY.<OVERLAY.NAME>.SINIT_END;	# end address of static init
				WRITEW <OVERLAY.ID>;							# ROM file ID
				WRITEW 0;										# Reserved
		<END.OVERLAYS>
	
	} > <PROPERTY.OVERLAYTABLE>F

	############################ ARENA ##################################
	.dummy.MAIN_EX.NITRO:
	{
		. = ALIGN(32);
	
	} > dummy.MAIN_EX.NITRO
	
	.arena.MAIN.NITRO:
	{
		. = ALIGN(32);
		SDK_SECTION_ARENA_START		=.;
	
	} > arena.MAIN.NITRO
	
	.arena.MAIN_EX.NITRO:
	{
		. = ALIGN(32);
		SDK_SECTION_ARENA_EX_START	=.;
	
	} > arena.MAIN_EX.NITRO
	
	.arena.ITCM:
	{
		. = ALIGN(32);
		SDK_SECTION_ARENA_ITCM_START	=.;
	
	} > arena.ITCM
	
	.arena.DTCM:
	{
		. = ALIGN(32);
		SDK_SECTION_ARENA_DTCM_START	=.;
	
	} > arena.DTCM

	############################ OTHERS #################################
	SDK_MAIN_ARENA_LO = SDK_SECTION_ARENA_START;
	SDK_IRQ_STACKSIZE = <STATIC.IRQSTACKSIZE>;	# allocated in DTCM
	SDK_SYS_STACKSIZE = <STATIC.STACKSIZE>;		# when 0 means all remains of DTCM
	SDK_SYS_STACKSIZE_SIGN = (SDK_SYS_STACKSIZE < 0x80000000) * 2 - 1;

	.check.ITCM:
	{
		. = . + SDK_AUTOLOAD_ITCM_SIZE + SDK_AUTOLOAD_ITCM_BSS_SIZE;
		<FOREACH.OVERLAYS=ITCM>
		. = . + SDK_OVERLAY.<OVERLAY.NAME>.SIZE + SDK_OVERLAY.<OVERLAY.NAME>.BSS_SIZE;
		<END.OVERLAYS>
	
	} > check.ITCM

	.check.DTCM:
	{
		. = . + SDK_AUTOLOAD_DTCM_SIZE + SDK_AUTOLOAD_DTCM_BSS_SIZE;
		<FOREACH.OVERLAYS=DTCM>
		. = . + SDK_OVERLAY.<OVERLAY.NAME>.SIZE + SDK_OVERLAY.<OVERLAY.NAME>.BSS_SIZE;
		<END.OVERLAYS>
		. = . + 0x080 + SDK_IRQ_STACKSIZE + SDK_SYS_STACKSIZE * SDK_SYS_STACKSIZE_SIGN;
	} > check.DTCM

	.check.WORKRAM:
	{
		. = SDK_STATIC_BSS_END;
	} > check.WORKRAM

	########################### LTDAUTOLOADS ############################
	SDK_LTDAUTOLOAD.LTDMAIN.START		= SDK_STATIC_BSS_END;
	SDK_LTDAUTOLOAD.LTDMAIN.END			= SDK_LTDAUTOLOAD.LTDMAIN.START;
	SDK_LTDAUTOLOAD.LTDMAIN.BSS_END		= SDK_LTDAUTOLOAD.LTDMAIN.START;
	SDK_LTDAUTOLOAD.LTDMAIN.SIZE		= 0;
	SDK_LTDAUTOLOAD.LTDMAIN.BSS_SIZE	= 0;
	SDK_LTDAUTOLOAD_TOP_START			= 0x02400000;
	SDK_LTDAUTOLOAD_TOP_SIZE			= 4;	# STATIC 領域が無い代わりに 4 bytes のダミーがバイナリファイルの先頭に入る #
	SDK_LTDAUTOLOAD_START				= SDK_LTDAUTOLOAD_TOP_START + SDK_LTDAUTOLOAD_TOP_SIZE;
	SDK_LTDAUTOLOAD_SIZE				= 0;
	SDK_LTDAUTOLOAD_NUMBER				= <NUMBER.LTDAUTOLOADS>;

	.binary.LTDAUTOLOAD_TOP:
	{
				WRITEW 0;
	
	} > binary.LTDAUTOLOAD_TOP

	SDK_LTDAUTOLOAD_LTDMAIN_START		= SDK_LTDAUTOLOAD.LTDMAIN.START;
	SDK_LTDAUTOLOAD_LTDMAIN_END			= SDK_LTDAUTOLOAD.LTDMAIN.END;
	SDK_LTDAUTOLOAD_LTDMAIN_BSS_END		= SDK_LTDAUTOLOAD.LTDMAIN.BSS_END;
	SDK_LTDAUTOLOAD_LTDMAIN_SIZE		= SDK_LTDAUTOLOAD.LTDMAIN.SIZE;
	SDK_LTDAUTOLOAD_LTDMAIN_BSS_SIZE	= SDK_LTDAUTOLOAD.LTDMAIN.BSS_SIZE;

	######################### LTDAUTOLOAD_INFO ##########################
	.binary.LTDAUTOLOAD_INFO:
	{
	
	} > binary.LTDAUTOLOAD_INFO

	SDK_LTDAUTOLOAD_LIST		= SDK_LTDAUTOLOAD_START + SDK_LTDAUTOLOAD_SIZE;
	SDK_LTDAUTOLOAD_LIST_END	= SDK_LTDAUTOLOAD_LIST + SIZEOF(.binary.LTDAUTOLOAD_INFO);
	SDK_LTDAUTOLOAD_SIZE		= SDK_LTDAUTOLOAD_SIZE + SIZEOF(.binary.LTDAUTOLOAD_INFO);

	########################### LTDOVERLAYS #############################
	SDK_LTDOVERLAY_NUMBER			= <NUMBER.LTDOVERLAYS>;

	########################## LTDOVERLAYDEFS ###########################
	.<PROPERTY.LTDOVERLAYDEFS>L:
	{
		###  TWL limited extended static module information
				WRITEW SDK_LTDAUTOLOAD_TOP_START;						# load address
				WRITEW 0;												# padding
				WRITEW SDK_LTDAUTOLOAD_SIZE + SDK_LTDAUTOLOAD_TOP_SIZE;	# size of module
				WRITEW 0;												# padding
		
		###  TWL limited overlay filename
				<FOREACH.LTDOVERLAYS>
				WRITES ("<LTDOVERLAY.NAME><PROPERTY.LTDSUFFIX>");
				<END.LTDOVERLAYS>
	
	} > <PROPERTY.LTDOVERLAYDEFS>L

	######################### LTDOVERLAYTABLE ###########################
	.<PROPERTY.LTDOVERLAYTABLE>L:
	{
		<FOREACH.LTDOVERLAYS>
				WRITES <LTDOVERLAY.ID>									# overlay ID
				WRITEW ADDR(.<LTDOVERLAY.NAME>);						# load address
				WRITEW SDK_LTDOVERLAY.<LTDOVERLAY.NAME>.SIZE;			# size of module
				WRITEW SDK_LTDOVERLAY.<LTDOVERLAY.NAME>.BSS_SIZE;		# size of bss
				WRITEW SDK_LTDOVERLAY.<LTDOVERLAY.NAME>.SINIT_START;	# start address of static init
				WRITEW SDK_LTDOVERLAY.<LTDOVERLAY.NAME>.SINIT_END;		# end address of static init
				WRITEW <LTDOVERLAY.ID>									# ROM file ID
				WRITEW 0;												# Reserved
		<END.LTDOVERLAYS>
	
	} > <PROPERTY.LTDOVERLAYTABLE>L

	############################ ARENA ##################################
	.dummy.MAIN_EX.TWL:
	{
		. = ALIGN(32);
	
	} > dummy.MAIN_EX.TWL

	.arena.WRAM.TWL:
	{
		. = ALIGN(32);
		SDK_LTDMAIN_ARENA_LO	=.;
	
	} > arena.WRAM.TWL

	.arena.MAIN_EX.TWL:
	{
		. = ALIGN(32);
		SDK_LTDMAIN_EX_ARENA_LO	=.;
	
	} > arena.MAIN_EX.TWL

	############################ OTHERS #################################
	# Module filelist
	.binary.MODULE_FILES:
	{
		WRITES ("<STATIC.NAME><PROPERTY.FLXSUFFIX>");
		WRITES ("<PROPERTY.OVERLAYDEFS><PROPERTY.FLXSUFFIX>");
		WRITES ("<PROPERTY.OVERLAYTABLE><PROPERTY.FLXSUFFIX>");
		WRITES ("<STATIC.NAME><PROPERTY.LTDSUFFIX>");
		WRITES ("<PROPERTY.LTDOVERLAYDEFS><PROPERTY.LTDSUFFIX>");
		WRITES ("<PROPERTY.LTDOVERLAYTABLE><PROPERTY.LTDSUFFIX>");
	
	} > binary.MODULE_FILES

}
